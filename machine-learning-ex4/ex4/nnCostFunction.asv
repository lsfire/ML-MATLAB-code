function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
X = [ones(m,1) X]; % add extra one to X
z2 = Theta1*X'; % compute a(2),25 * 5000
a2 = sigmoid(z2');% 5000 * 25
a2 = [ones(m,1) a2];% add extra ones to a2 5000*26
z3 = Theta2*a2';% 10 * 5000
a3 = sigmoid(z3); % get h() result 10*5000
labelVector = 1:num_labels;
label_matrix = ones(m,num_labels); % store the label matrix 5000*10
for i=1:m
    label_matrix(i,:) = labelVector == y(i);
end 

label_matrix = label_matrix'; % 10*5000
% compute cost total
costTotal = 0.0;
for i = 1:m
    for j = 1:num_labels
        cost_single =  -label_matrix(j,i)*log(a3(j,i)) - (1-label_matrix(j,i))*log(1- a3(j,i));
        costTotal = costTotal + cost_single;
    end
end
J = (1/m)* costTotal;
temp_theta1 = Theta1(:,2:end);
temp_theta2 = Theta2(:,2:end);
total_regu = sum(sum(temp_theta1.^2)) + sum(sum(temp_theta2.^2));
regular = (lambda/(2*m)) * total_regu; 
J = J + regular;
% compute delta
delta1 = zeros(size(Theta1));% 25 * 401
delta2 = zeros(size(Theta2));% 10*26
for i=1:m
    a_1 = X(i,:)';
    z_2 = Theta*a_1;
    a_2 = [1;sigmoid(z_2)];
    z_3 = Theta2*a_2;
    a_3 = sigmoid(z_3);
    
    y_i = labelVector'==y(i);
    
    delta_3 = a_3 - y_t;
    delta_2 = Theta2'*delta_3.*[0;sigmoidGradient(z_2)]; 
    delta2 = delta2 + delta_3*a_2';
    delta1 = delta1 + delta_2*a_1';
    
    epsilon3 = a3(:,i) - (labelVector == y(i))'; % 10*1
    epsilon2 = (Theta2'*epsilon3).*sigmoidGradient([0;z2(:,m)]); %26*1
    delta1 = delta1 + epsilon2(2:end)*(X(i,:));
    delta2 = delta2 + epsilon3*(a2(i,:));
end

Theta1_grad = (1/m)*delta1;
Theta2_grad = (1/m)*delta2;


% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
